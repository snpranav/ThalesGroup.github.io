<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://thalesgroup.github.io/ciphertrust/blog</id>
    <title>CipherTrust Learn Blog</title>
    <updated>2022-11-17T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://thalesgroup.github.io/ciphertrust/blog"/>
    <subtitle>CipherTrust Learn Blog</subtitle>
    <icon>https://thalesgroup.github.io/ciphertrust/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[A Guide to Picking the Right Key Manager for Your Org]]></title>
        <id>choosing-a-key-manager</id>
        <link href="https://thalesgroup.github.io/ciphertrust/blog/choosing-a-key-manager"/>
        <updated>2022-11-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Your company has a ton of daily active users and you have this amazingly efficient architecture to process requests at scale, but your InfoSec team asks you to use a key manager ‚Äî there are so many out there, which one do you choose?]]></summary>
        <content type="html"><![CDATA[<p>Your company has a ton of daily active users and you have this amazingly efficient architecture to process requests at scale, but your InfoSec team asks you to use a key manager ‚Äî there are so many out there, which one do you choose?</p><p>There are various different types of key managers, but in this post we‚Äôll cover three most common key managers:</p><ul><li><p>Cloud Key Managers (Ex ‚Äî AWS KMS, GCP KMS, Azure Key Vault, etc.)</p></li><li><p>External Key Managers (Ex ‚Äî Thales CipherTrust Manager, Hashicorp Vault)</p></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="first-the-literal--key-to-security--hsms">First, the literal  key to security ‚Äî HSMs<a class="hash-link" href="#first-the-literal--key-to-security--hsms" title="Direct link to heading">‚Äã</a></h2><p>HSM stands for ‚Äú<a href="https://en.wikipedia.org/wiki/Hardware_security_module" target="_blank" rel="noopener noreferrer">Hardware Security Module</a>‚Äù. These are physical devices that are usually tamper resistant which store keys and perform encrypt, decrypt and other cryptographic operations.</p><p>HSMs are needed in secure environments such as healthcare or financial institutions where you need to pass compliances such as PCI DSS.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="now-lets-compare">Now Let‚Äôs Compare<a class="hash-link" href="#now-lets-compare" title="Direct link to heading">‚Äã</a></h2><p>Let‚Äôs look at the pros and cons of each to help you decide what would work best for your organization.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="cloud-key-managers">Cloud Key Managers<a class="hash-link" href="#cloud-key-managers" title="Direct link to heading">‚Äã</a></h3><p>‚úÖ <strong>Easy Integration with Cloud Managed Services</strong></p><p>When using cloud key managers like <a href="https://aws.amazon.com/kms/" target="_blank" rel="noopener noreferrer">AWS KMS (Key Management Service)</a> it can be advantageous as you get the flexibility of AWS managing your keys as well as direct integration into your existing AWS managed services such as <a href="https://aws.amazon.com/s3/" target="_blank" rel="noopener noreferrer">AWS S3</a>, or <a href="https://aws.amazon.com/rods/" target="_blank" rel="noopener noreferrer">AWS RDS (Relational Database Service)</a>, etc.</p><p>‚úÖ <strong>HSMs provisioned and managed by a cloud provider (most of the time ü§û)</strong></p><p>Most famous cloud providers have HSMs that they use in their data centers which store your keys, so you don‚Äôt have to worry about renting an HSM.</p><p><strong>‚ùå No Separation of Trust üïµÔ∏è‚Äç‚ôÄÔ∏è</strong></p><p>Since your cloud provider now hosts and controls your data and encryption keys. Your user data might not be as safe anymore as the cloud provider with malicious intent could easily decrypt your user data. This does not help in creating a <strong>zero-trust architecture</strong>. While it‚Äôs true that your cloud provider has your best interest; there are always hackers lurking around the internet trying to get malicious access to your data, so it‚Äôs best to store data in an isolated environment.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="external-key-managers">External Key Managers<a class="hash-link" href="#external-key-managers" title="Direct link to heading">‚Äã</a></h3><p><strong>‚úÖ Complete Separation of Trust</strong></p><p>When running a product such as CipherTrust Manager or Hashicorp Vault, your architectures are zero-trust by default as 2 different entities have access to either your data or your keys and <strong>NOT both</strong>.</p><p><strong>‚ùå Build your own custom integrations</strong></p><p>Unless the key manager service has connectors, many-a-times, you would need to build your own connectors which could put a lot of engineering debt on your teams.</p><p>‚ö†Ô∏è<strong> Need to rent out your own HSM</strong></p><p>You‚Äôd need to manage your own HSM, but fortunately, there are service providers that will rent out and manage the HSMs (just like a cloud provider) ‚Äî so this is neither a pro nor a con. A great example of a hosted HSM is the <a href="https://cpl.thalesgroup.com/encryption/data-protection-on-demand/services/luna-cloud-hsm" target="_blank" rel="noopener noreferrer">Luna HSM</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="best-of-both-worlds-"><strong>Best of Both Worlds ü§î</strong><a class="hash-link" href="#best-of-both-worlds-" title="Direct link to heading">‚Äã</a></h2><p>Yes, it‚Äôs possible! To implement the best data security practices, you would want the ease of integration with cloud-managed services as well as complete separation of trust to isolate encryption keys from data. This method is also called <strong>BYOK </strong>(bring your own key).</p><p>You can do this with products such as CipherTrust Manager <a href="https://cpl.thalesgroup.com/encryption/key-management/ciphertrust-cloud-key-manager" target="_blank" rel="noopener noreferrer">Cloud Key Manager</a>. This offers:</p><p><strong>‚úÖ Direct connection with cloud-managed KMS account</strong></p><p>Once you connect your AWS or GCP or Azure account to CipherTrust Manager as shown in the tutorial linked below, you will be able to manage keys directly from CipherTrust Manager and encrypt data on cloud-managed services.</p><p><strong>‚úÖ Key Lifecycle Management in a few clicks</strong></p><p>In just a few clicks you can setup key rotation which will rotate your keys every few months and provide the best data security standards for your organization.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-do-i-implement-this">How do I implement this?<a class="hash-link" href="#how-do-i-implement-this" title="Direct link to heading">‚Äã</a></h3><p>Luckily, it‚Äôs easy to implement in 3 simple steps. Here‚Äôs a tutorial I made that demos connecting CipherTrust Manager to my AWS KMS (Key Management Service) account and encrypt my AWS managed services such as S3 and RDS.</p><p>Now go ahead and encrypt all your cloud-managed services using this hybrid BYOK approach!</p><p>If you have any issues with implementation or questions about data encryption, feel free to leave a comment, tweet <a href="https://twitter.com/snpranav" target="_blank" rel="noopener noreferrer">@snpranav</a>, or raise a <a href="https://github.com/snpranav/data-encryption-in-transit-demo/issues/new" target="_blank" rel="noopener noreferrer">GitHub issue</a> :)</p>]]></content>
        <author>
            <name>Pranav Shikarpur</name>
            <uri>https://twitter.com/snpranav</uri>
        </author>
        <category label="data-encryption" term="data-encryption"/>
        <category label="key-management" term="key-management"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Guide to Data Security Architectures]]></title>
        <id>a-guide-to-encryption-architectures</id>
        <link href="https://thalesgroup.github.io/ciphertrust/blog/a-guide-to-encryption-architectures"/>
        <updated>2022-10-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Building and deploying applications and services is super exciting. Still, when your security team prevents your application from going into production due to a lack of data encryption ‚Äî this can be very annoying.]]></summary>
        <content type="html"><![CDATA[<p>Building and deploying applications and services is super exciting. Still, when your security team prevents your application from going into production due to a lack of data encryption ‚Äî this can be very annoying.</p><p>Let‚Äôs take a look at the different data encryption methods that are most commonly used and how we can implement some of them.</p><h1>Data encrypted at-rest vs in-transit?</h1><p>Well, it‚Äôs often hard to choose between encrypting a complete Postgres database or encrypting only specific fields of data in the database right before it gets written to a table.</p><p>The key difference between the two is that encrypting a database <strong>after</strong> data is written to it is called <strong>data encryption at rest</strong> and encrypting data <strong>before</strong> data is written to a database is called data encryption <strong>in-transit</strong>.</p><p>The illustration below should give you a good high-level understanding of the difference. Although data encryption at-rest was a standard encryption practice followed for many years, it involves developers writing and maintaining various different scripts or applications to ensure that the encryption is up to company standards. It is still useful while encrypting file systems and storage. On the other hand, data encryption in-transit is a lot more beneficial at times when you want to make your infrastructure database agnostic and provide high-security standards with significantly low developer effort.</p><p><img loading="lazy" src="https://miro.medium.com/max/720/1*7sOyc7n62Mxsq0cfKsLL0Q.png" alt="Data Encryption at REST Architecture" class="img_ev3q"></p><p>Note that from the above diagram we can see that the method of encrypting data in-transit uses a <strong>side-car container</strong> which is a proxy used to intercept every request with sensitive fields or encrypted data and encrypt or decrypt the same respectively.</p><p><img loading="lazy" src="https://miro.medium.com/max/720/1*9PC9Nv4j_L2LIoWsR4ZIeg.png" alt="Data Encryption in-transit Architecture" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="advantages-of-data-encryption-in-transit">Advantages of Data Encryption in-Transit<a class="hash-link" href="#advantages-of-data-encryption-in-transit" title="Direct link to heading">‚Äã</a></h2><p><strong>‚úÖ No change to applications</strong></p><p>The beauty of doing data-encryption in transit is that you don‚Äôt need to worry about changing any of your frontend apps, APIs, or databases. Since the side-car container does field-level encryption, you can granularly control all the data that needs to be encrypted and decrypted by remotely setting access policies from your key manager.</p><p><strong>‚úÖ Easy to deploy</strong></p><p>Deploying a <a href="https://cpl.thalesgroup.com/encryption/ciphertrust-data-protection-gateway" target="_blank" rel="noopener noreferrer">Data Protection Gateway</a> side-car container is as easy to deploy as logging agents such as DataDog or Prometheus. You can just update your docker-compose, Kubernetes config files or just use Helm to install it.</p><p><strong>‚úÖ Developers can stop implementing data security policies</strong></p><p>Now you can shift the responsibility of setting and implementing data security policies from developers over to InfoSec teams. This significantly helps prevent data breaches or unauthorized data access.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="disadvantages-of-data-encryption-in-transit">Disadvantages of Data Encryption in-Transit<a class="hash-link" href="#disadvantages-of-data-encryption-in-transit" title="Direct link to heading">‚Äã</a></h2><p>‚ùå <strong>Data encryption is only as strong as policies set</strong></p><p>This applies to any method of data encryption. However, when we perform field-level encryption and decryption, InfoSec teams need to be aware of all data flowing through various API routes to prevent data breaches and unauthorized access to unencrypted data.</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-do-i-implement-data-encryption-in-transit">How Do I Implement Data Encryption in-Transit?<a class="hash-link" href="#how-do-i-implement-data-encryption-in-transit" title="Direct link to heading">‚Äã</a></h2><p>You‚Äôre in luck üôå because I have a tutorial showing you how to easily implement data encryption in-transit with any of your containerized applications.</p><p>In this tutorial, I have used <a href="https://ciphertrust.io/" target="_blank" rel="noopener noreferrer">CipherTrust Manager</a>‚Äôs Data Protection Gateway product which is extremely easy to set up and free to start usingüëá</p><div class="video-responsive"><iframe width="853" height="480" src="https://www.youtube.com/embed/EJun5McPRGY" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" title="Embedded youtube"></iframe></div><div class="flex flex-row justify-between"><div><a href="https://github.com/snpranav/data-encryption-in-transit-demo" target="_blank" rel="noopener noreferrer"><button style="background-color:#171515" class="p-2 my-4 rounded-md border-none cursor-pointer text-white">GitHub <svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 1024 1024" class="text-white" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M511.6 76.3C264.3 76.2 64 276.4 64 523.5 64 718.9 189.3 885 363.8 946c23.5 5.9 19.9-10.8 19.9-22.2v-77.5c-135.7 15.9-141.2-73.9-150.3-88.9C215 726 171.5 718 184.5 703c30.9-15.9 62.4 4 98.9 57.9 26.4 39.1 77.9 32.5 104 26 5.7-23.5 17.9-44.5 34.7-60.8-140.6-25.2-199.2-111-199.2-213 0-49.5 16.3-95 48.3-131.7-20.4-60.5 1.9-112.3 4.9-120 58.1-5.2 118.5 41.6 123.2 45.3 33-8.9 70.7-13.6 112.9-13.6 42.4 0 80.2 4.9 113.5 13.9 11.3-8.6 67.3-48.8 121.3-43.9 2.9 7.7 24.7 58.3 5.5 118 32.4 36.8 48.9 82.7 48.9 132.3 0 102.2-59 188.1-200 212.9a127.5 127.5 0 0 1 38.1 91v112.5c.8 9 0 17.9 15 17.9 177.1-59.7 304.6-227 304.6-424.1 0-247.2-200.4-447.3-447.5-447.3z"></path></svg></button></a></div><div><a href="https://main-yak.sneakpeak.dev/" target="_blank" rel="noopener noreferrer"><button class="p-2 my-4 rounded-md border-none cursor-pointer">View Demo <svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 1024 1024" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M869 487.8L491.2 159.9c-2.9-2.5-6.6-3.9-10.5-3.9h-88.5c-7.4 0-10.8 9.2-5.2 14l350.2 304H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h585.1L386.9 854c-5.6 4.9-2.2 14 5.2 14h91.5c1.9 0 3.8-.7 5.2-2L869 536.2a32.07 32.07 0 0 0 0-48.4z"></path></svg></button></a></div></div><hr><p>Now go ahead and encrypt data in-transit from all your applications using side-car containers.</p><p>If you have any issues with implementation or questions about data encryption in-transit, feel free to leave a comment, tweet <a href="https://twitter.com/snpranav" target="_blank" rel="noopener noreferrer">@snpranav</a>, or raise a <a href="https://github.com/snpranav/data-encryption-in-transit-demo/issues/new" target="_blank" rel="noopener noreferrer">GitHub issue</a> :)</p>]]></content>
        <author>
            <name>Pranav Shikarpur</name>
            <uri>https://twitter.com/snpranav</uri>
        </author>
        <category label="data-encryption" term="data-encryption"/>
        <category label="data-protection-gateway" term="data-protection-gateway"/>
    </entry>
</feed>